{"ast":null,"code":"var _jsxFileName = \"/Users/sharonxia/github/react-tic-tac-toe/tic_tac_toe/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; //Square is a function component: a simpler way to write components that only contain a render method and don’t have their own state.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  // constructor(props) {\n  //     super(props);\n  //     this.state = {\n  //         squares: Array(9).fill(null),\n  //         xIsNext: true,\n  //     };\n  // }\n  //.slice() to create a copy of the squares array to modify instead of modifying the existing array\n  // handleClick(i) {\n  //     const squares = this.state.squares.slice();\n  //     if(calculateWinner(squares) || squares[i]) {\n  //         return;\n  //     }\n  //     squares[i] = this.state.xIsNext ? 'X' : 'O';\n  //     this.setState({ \n  //         squares: squares,\n  //         xIsNext: !this.state.xIsNext, \n  //     });\n  // }\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square // value={this.state.squares[i]}\n    // onClick={() => this.handleClick(i)}\n    , {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    // const winner = calculateWinner(this.state.squares);\n    // let status;\n    // if(winner) {\n    //     status = 'Winner: ' + winner;\n    // } else {\n    //     status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    // }\n    //<div className=\"status\">{status}</div>\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  } //Unlike the array push() method you might be more familiar with, the concat() method doesn’t mutate the original array, so we prefer it.\n\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares); //As we iterate through history array, step variable refers to the current history element value, and move refers to the current history element index. \n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 143,\n  columnNumber: 5\n}, this), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n/*\n1. The onClick prop on the built-in DOM <button> component tells React to set up a click event listener.\n2. When the button is clicked, React will call the onClick event handler that is defined in Square’s render() method.\nThis event handler calls this.props.onClick(). The Square’s onClick prop was specified by the Board.\n3. Since the Board passed onClick={() => this.handleClick(i)} to Square, the Square calls the Board’s handleClick(i) when clicked.\n4. We have not defined the handleClick() method yet, so our code crashes. If you click a square now, you should see a red error screen saying something like “this.handleClick is not a function”.\n\n\nhistory = [\n  // Before first move\n  {\n    squares: [\n      null, null, null,\n      null, null, null,\n      null, null, null,\n    ]\n  },\n  // After first move\n  {\n    squares: [\n      null, null, null,\n      null, 'X', null,\n      null, null, null,\n    ]\n  },\n  // After second move\n  {\n    squares: [\n      null, null, null,\n      null, 'X', null,\n      null, null, 'O',\n    ]\n  },\n  // ...\n]\n*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["/Users/sharonxia/github/react-tic-tac-toe/tic_tac_toe/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","xIsNext","handleClick","current","length","slice","calculateWinner","setState","concat","winner","moves","map","step","move","desc","jumpTo","status","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//Square is a function component: a simpler way to write components that only contain a render method and don’t have their own state.\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         squares: Array(9).fill(null),\n    //         xIsNext: true,\n    //     };\n    // }\n\n    //.slice() to create a copy of the squares array to modify instead of modifying the existing array\n    // handleClick(i) {\n    //     const squares = this.state.squares.slice();\n    //     if(calculateWinner(squares) || squares[i]) {\n    //         return;\n    //     }\n    //     squares[i] = this.state.xIsNext ? 'X' : 'O';\n    //     this.setState({ \n    //         squares: squares,\n    //         xIsNext: !this.state.xIsNext, \n    //     });\n    // }\n\n    renderSquare(i) {\n        return (\n            <Square\n                // value={this.state.squares[i]}\n                // onClick={() => this.handleClick(i)}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        // const winner = calculateWinner(this.state.squares);\n        // let status;\n        // if(winner) {\n        //     status = 'Winner: ' + winner;\n        // } else {\n        //     status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        // }\n        //<div className=\"status\">{status}</div>\n\n        return (\n            <div>\n                \n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{squares: Array(9).fill(null)}],\n            xIsNext: true,\n        };\n    }\n    //Unlike the array push() method you might be more familiar with, the concat() method doesn’t mutate the original array, so we prefer it.\n    handleClick(i) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if(calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({ \n            history: history.concat([{\n                squares: squares,\n            }]),\n            xIsNext: !this.state.xIsNext, \n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const winner = calculateWinner(current.squares);\n        //As we iterate through history array, step variable refers to the current history element value, and move refers to the current history element index. \n        const moves = history.map((step, move) => {\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\n            return (\n                <li>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if(winner) {\n            status = 'Winner' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n\n/*\n1. The onClick prop on the built-in DOM <button> component tells React to set up a click event listener.\n2. When the button is clicked, React will call the onClick event handler that is defined in Square’s render() method.\nThis event handler calls this.props.onClick(). The Square’s onClick prop was specified by the Board.\n3. Since the Board passed onClick={() => this.handleClick(i)} to Square, the Square calls the Board’s handleClick(i) when clicked.\n4. We have not defined the handleClick() method yet, so our code crashes. If you click a square now, you should see a red error screen saying something like “this.handleClick is not a function”.\n\n\nhistory = [\n  // Before first move\n  {\n    squares: [\n      null, null, null,\n      null, null, null,\n      null, null, null,\n    ]\n  },\n  // After first move\n  {\n    squares: [\n      null, null, null,\n      null, 'X', null,\n      null, null, null,\n    ]\n  },\n  // After second move\n  {\n    squares: [\n      null, null, null,\n      null, 'X', null,\n      null, null, 'O',\n    ]\n  },\n  // ...\n]\n*/"]},"metadata":{},"sourceType":"module"}